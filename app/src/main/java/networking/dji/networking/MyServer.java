package networking.dji.networking;import java.io.IOException;import java.io.InputStream;import java.io.ObjectInputStream;import java.io.ObjectOutputStream;import java.io.OutputStream;import java.net.ServerSocket;import java.net.Socket;import java.util.ArrayList;import java.util.List;/** * Created by wangxiangjiu on 6/20/16. */public class MyServer {    Thread mThread;    ServerSocket serverSocket;    Socket connectedSocket;    ObjectInputStream in;    ObjectOutputStream out;    public static int len;    /* List of clientSockets. */    List<ClientSocket> clientSockets = new ArrayList<>();    public MyServer() {    }    public void destroy() {    }    /**     * Send Message MSG to All Clients.     * @param msg     */    public void sendMsgToAll(String msg) {        for (ClientSocket clientSocket : clientSockets) {            clientSocket.sendMsg(msg);        }    }    /**     * Method triggered when pressing the button.     */    public void startListening() {        mThread = new Thread(new Runnable() {            @Override            public void run() {                try {                    serverSocket = new ServerSocket(2001);                    while (true) {                        //Log.d("", "begin");                        connectedSocket = serverSocket.accept();                        //Log.d("", "connected");                        ClientSocket clientSocket = new ClientSocket(connectedSocket);                        clientSocket.start();                        clientSockets.add(clientSocket);                        //Log.d("", "added");                    }                } catch (Exception e) {                    e.printStackTrace();                }            }        });        mThread.start();    }    /**     * ClientSocket is the socket that communicates with the Client.     */    private class ClientSocket extends Thread {        private Socket socket;        private InputStream in;        private OutputStream out;        public ClientSocket(Socket socket) {            this.socket = socket;            try {                in = this.socket.getInputStream();                out = this.socket.getOutputStream();            } catch (Exception e) {                e.printStackTrace();            }        }        @Override        public void run() {            try {                while (true) {                    byte[] buffer = new byte[1024 * 8];                    len = in.read(buffer);                }            } catch (IOException e) {                e.printStackTrace();            }        }        /**         * Method that allows the client socket to sent msg.         * @param msg         */        public void sendMsg(String msg) {            try {                out.write(msg.getBytes());                out.flush();            } catch (IOException e) {                e.printStackTrace();            }        }    }}